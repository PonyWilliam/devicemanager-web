<template>
	<text @click="onClick" :style="text_style">{{text}}</text>
</template>

<script>
	/**
	 * text 文本
	 * @description 文本组件
	 * @tutorial https://dnvue.dengqichang.cn/component/basic_component/n-text.html
	 * @property {String, Number} text 文本内容
	 * @property {String, Number} size 字号(rpx)
	 * @property {String} color 文本颜色
	 * @property {String, Number} lines 超出行省略
	 * @property {String} align 文本位置
	 *  @value left 左侧
	 *  @value center 中间
	 *  @value right 右侧
	 * @property {String, Number} leading 行高
	 * @property {Boolean} weight 文本加粗
	 * @property {String} decoration 文本修饰
	 *  @value none 默认值，定义标准的文本。
	 *  @value line-through 定义穿过文本下的一条线
	 *  @value underline 定义文本下的一条线
	 * @property {String, Number} width 宽度
	 * @property {Object} style-custom 组件自定义样式，同 css 样式。注意带’-‘连接符的属性需要使用小驼峰写法如：`backgroundColor:red`
	 * @event {Function()} click 点击事件
	 */
	export default {
		name: "nText",
		props: {
			text: {
				type: [String, Number], //文本
				default: ""
			},
			size: {
				type: [String, Number], //字号(rpx)
				default: 30
			},
			color: {
				type: String, //文本颜色（class）
				default: "$gray-13"
			},
			lines: {
				type: [String, Number], //超出省略
				default: ""
			},
			align: {
				type: String, //文本位置
				default: "left"
			},
			leading: {
				type: [String, Number], //行高
				default: ""
			},
			weight: {
				type: Boolean, //文本加粗
				default: false
			},
			decoration: {
				type: String, //文本的修饰
				default: "none"
			},
			width: {
				type: [String, Number], //文本宽度
				default: ""
			},
			styleCustom: {
				type: Object, //组件自定义样式，同 css 样式。注意带’-‘连接符的属性需要使用小驼峰写法如：`backgroundColor:red`
				default: function() {
					return {}
				}
			}
		},
		computed: {
			text_style() {
				let style = {
					...this.styleCustom,
					fontSize: `${this.size}rpx`,
					textAlign: this.align,
					fontWeight: this.weight ? 'bold' : 'normal',
					textDecoration: this.decoration,
					color: this.$store.theme[this.color] == undefined ? this.color : this.$store.theme[this.color]
				};
				/* 超出省略 */
				if (!!this.lines) {
					let lines_temp = {
						textOverflow: 'ellipsis',
						lines: this.lines,
						overflow: 'hidden',
						display: '-webkit-box',
						'-webkit-box-orient': 'vertical',
						'-webkit-line-clamp': this.lines
					};
					style = Object.assign(style, lines_temp);
				};
				/* 行高 */
				if (!!this.leading) {
					let leading_temp = {
						'lineHeight': `${this.leading}rpx`
					};
					style = Object.assign(style, leading_temp);
				};
				/* 宽度 */
				if (this.width !== '') {
					let width_temp = {
						width: `${this.width}rpx`
					};
					style = Object.assign(style, width_temp);
				};

				return this.$store.tools.styleInto(style);;
			}
		},
		data() {
			return {

			};
		},
		methods:{
			onClick(e){
				this.$emit("click",e)
			}
		}
	}
</script>

<style>

</style>
